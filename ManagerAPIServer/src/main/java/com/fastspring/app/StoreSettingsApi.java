/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.fastspring.app;

import com.brightmarket.core.site.BasicStoreSite;
import com.brightmarket.core.site.Site;
import com.fastspring.app.model.StoreSettings;
import com.fastspring.app.model.StoreSettingsStoreSiteIdGet200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-08-07T13:23:00.142547+05:30[Asia/Kolkata]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "storeSettings", description = "the storeSettings API")
public interface StoreSettingsApi {


    @GetMapping("/site")
    ResponseEntity<Site> createSite(@RequestBody Site site);

    @GetMapping("/site/{id}")
    ResponseEntity<Site> getSite(@PathVariable Long id);

    @PostMapping("/basic-store-site")
    ResponseEntity<BasicStoreSite> createBasicStoreSite(@RequestBody BasicStoreSite basicStoreSite);

    @GetMapping("/basic-store-site/{id}")
    ResponseEntity<BasicStoreSite> getBasicStoreSite(@PathVariable Long id);


    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /storeSettings/{storeSiteId} : Get All Store Settings
     * Retrieve the settings for a specific store.
     *
     * @param storeSiteId The unique identifier for the store. (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Store not found (status code 404)
     */
    @Operation(
        operationId = "storeSettingsStoreSiteIdGet",
        summary = "Get All Store Settings",
        description = "Retrieve the settings for a specific store.",
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StoreSettingsStoreSiteIdGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Store not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/storeSettings/{storeSiteId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<StoreSettingsStoreSiteIdGet200Response> storeSettingsStoreSiteIdGet(
        @Parameter(name = "storeSiteId", description = "The unique identifier for the store.", required = true, in = ParameterIn.PATH) @PathVariable("storeSiteId") String storeSiteId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"settings\" : { \"invoicingAdminSettings\" : { \"contactManagementEnabled\" : true, \"defaultDeliveryMethod\" : \"After Payment\", \"defaultQuoteNotes\" : \"defaultQuoteNotes\", \"allowSeparateBillingContact\" : true, \"quoteManagementEnabled\" : true, \"enableSecureInvoiceURL\" : true, \"intelligentQuoteManagementEnabled\" : true, \"defaultDaysForInvoiceReminder\" : 0, \"defaultNetTerms\" : \"NET 0\", \"enableSelfServiceUpgrade\" : true, \"checkPaymentInstructionsDisplayEnabled\" : true, \"enablePrePaymentManualFulfillment\" : true, \"apiInvoicingEnabled\" : true }, \"supportSettings\" : { \"supportEmail\" : \"supportEmail\", \"supportPhoneNumber\" : \"supportPhoneNumber\", \"supportHours\" : \"supportHours\", \"supportOrganization\" : \"supportOrganization\", \"supportNotes\" : \"supportNotes\", \"displaySupportContactOnReceipt\" : true }, \"storeLocalizationSettings\" : { \"supportedCurrencies\" : [ \"supportedCurrencies\", \"supportedCurrencies\" ], \"defaultLanguage\" : \"defaultLanguage\", \"supportedLanguages\" : [ \"supportedLanguages\", \"supportedLanguages\" ], \"supportedRegions\" : [ \"supportedRegions\", \"supportedRegions\" ], \"baseCurrency\" : \"baseCurrency\" }, \"storeSiteId\" : \"storeSiteId\", \"paymentAdminSettings\" : { \"defaultPaymentMethod\" : \"defaultPaymentMethod\", \"preferredPaymentMethodPerRegion\" : { \"key\" : \"preferredPaymentMethodPerRegion\" }, \"oneClickPaymentEnabled\" : true, \"paymentMethods\" : [ \"credit_card\", \"credit_card\" ], \"planManagementEnabled\" : true }, \"generalAdminSettings\" : { \"storePublicLogoUrl\" : \"https://openapi-generator.tech\", \"emailFromName\" : \"emailFromName\", \"storePublicDescription\" : \"storePublicDescription\", \"storeName\" : \"storeName\", \"storePublicLabelColor\" : \"storePublicLabelColor\", \"storeDisplayName\" : \"storeDisplayName\", \"storePublicUrl\" : \"https://openapi-generator.tech\", \"storePublicFaviconUrl\" : \"https://openapi-generator.tech\", \"replyToEmail\" : \"replyToEmail\" }, \"catalogAdminSettings\" : { \"defaultProductFormat\" : \"defaultProductFormat\", \"catalogMode\" : \"gaming\", \"urlLinkSourcesEnabled\" : true, \"advancedPricingEnabled\" : true, \"defaultTaxCode\" : \"defaultTaxCode\" }, \"subscriptionSettings\" : { \"subscriptionTrialPeriodDays\" : 6, \"coTerminusBillingEnabled\" : true, \"allowAutomaticToManualSubscription\" : true, \"trialWithoutPaymentEnabled\" : true, \"subscriptionCancellationChoiceGlobal\" : \"immediate\", \"subscriptionPaymentMethods\" : [ \"credit_card\", \"credit_card\" ], \"subscriptionDunningSettings\" : { \"dunningIntervalDays\" : 5, \"dunningRetries\" : 1, \"dunningNotificationEnabled\" : true } } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /storeSettings/{storeSiteId} : Update Store Settings
     * Update the settings for a specific store.
     *
     * @param storeSiteId The unique identifier for the store. (required)
     * @param storeSettings  (optional)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Store not found (status code 404)
     */
    @Operation(
        operationId = "storeSettingsStoreSiteIdPost",
        summary = "Update Store Settings",
        description = "Update the settings for a specific store.",
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = StoreSettingsStoreSiteIdGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Store not found")
        },
        security = {
            @SecurityRequirement(name = "fs_identity_auth", scopes={ "write:storeSettings" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/storeSettings/{storeSiteId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<StoreSettingsStoreSiteIdGet200Response> storeSettingsStoreSiteIdPost(
        @Parameter(name = "storeSiteId", description = "The unique identifier for the store.", required = true, in = ParameterIn.PATH) @PathVariable("storeSiteId") String storeSiteId,
        @Parameter(name = "StoreSettings", description = "") @Valid @RequestBody(required = false) @Nullable StoreSettings storeSettings
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"settings\" : { \"invoicingAdminSettings\" : { \"contactManagementEnabled\" : true, \"defaultDeliveryMethod\" : \"After Payment\", \"defaultQuoteNotes\" : \"defaultQuoteNotes\", \"allowSeparateBillingContact\" : true, \"quoteManagementEnabled\" : true, \"enableSecureInvoiceURL\" : true, \"intelligentQuoteManagementEnabled\" : true, \"defaultDaysForInvoiceReminder\" : 0, \"defaultNetTerms\" : \"NET 0\", \"enableSelfServiceUpgrade\" : true, \"checkPaymentInstructionsDisplayEnabled\" : true, \"enablePrePaymentManualFulfillment\" : true, \"apiInvoicingEnabled\" : true }, \"supportSettings\" : { \"supportEmail\" : \"supportEmail\", \"supportPhoneNumber\" : \"supportPhoneNumber\", \"supportHours\" : \"supportHours\", \"supportOrganization\" : \"supportOrganization\", \"supportNotes\" : \"supportNotes\", \"displaySupportContactOnReceipt\" : true }, \"storeLocalizationSettings\" : { \"supportedCurrencies\" : [ \"supportedCurrencies\", \"supportedCurrencies\" ], \"defaultLanguage\" : \"defaultLanguage\", \"supportedLanguages\" : [ \"supportedLanguages\", \"supportedLanguages\" ], \"supportedRegions\" : [ \"supportedRegions\", \"supportedRegions\" ], \"baseCurrency\" : \"baseCurrency\" }, \"storeSiteId\" : \"storeSiteId\", \"paymentAdminSettings\" : { \"defaultPaymentMethod\" : \"defaultPaymentMethod\", \"preferredPaymentMethodPerRegion\" : { \"key\" : \"preferredPaymentMethodPerRegion\" }, \"oneClickPaymentEnabled\" : true, \"paymentMethods\" : [ \"credit_card\", \"credit_card\" ], \"planManagementEnabled\" : true }, \"generalAdminSettings\" : { \"storePublicLogoUrl\" : \"https://openapi-generator.tech\", \"emailFromName\" : \"emailFromName\", \"storePublicDescription\" : \"storePublicDescription\", \"storeName\" : \"storeName\", \"storePublicLabelColor\" : \"storePublicLabelColor\", \"storeDisplayName\" : \"storeDisplayName\", \"storePublicUrl\" : \"https://openapi-generator.tech\", \"storePublicFaviconUrl\" : \"https://openapi-generator.tech\", \"replyToEmail\" : \"replyToEmail\" }, \"catalogAdminSettings\" : { \"defaultProductFormat\" : \"defaultProductFormat\", \"catalogMode\" : \"gaming\", \"urlLinkSourcesEnabled\" : true, \"advancedPricingEnabled\" : true, \"defaultTaxCode\" : \"defaultTaxCode\" }, \"subscriptionSettings\" : { \"subscriptionTrialPeriodDays\" : 6, \"coTerminusBillingEnabled\" : true, \"allowAutomaticToManualSubscription\" : true, \"trialWithoutPaymentEnabled\" : true, \"subscriptionCancellationChoiceGlobal\" : \"immediate\", \"subscriptionPaymentMethods\" : [ \"credit_card\", \"credit_card\" ], \"subscriptionDunningSettings\" : { \"dunningIntervalDays\" : 5, \"dunningRetries\" : 1, \"dunningNotificationEnabled\" : true } } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
